# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import task_pb2 as task__pb2


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Dump = channel.unary_unary(
                '/cedana.services.task.TaskService/Dump',
                request_serializer=task__pb2.DumpArgs.SerializeToString,
                response_deserializer=task__pb2.DumpResp.FromString,
                )
        self.Restore = channel.unary_unary(
                '/cedana.services.task.TaskService/Restore',
                request_serializer=task__pb2.RestoreArgs.SerializeToString,
                response_deserializer=task__pb2.RestoreResp.FromString,
                )
        self.ContainerDump = channel.unary_unary(
                '/cedana.services.task.TaskService/ContainerDump',
                request_serializer=task__pb2.ContainerDumpArgs.SerializeToString,
                response_deserializer=task__pb2.ContainerDumpResp.FromString,
                )
        self.ContainerRestore = channel.unary_unary(
                '/cedana.services.task.TaskService/ContainerRestore',
                request_serializer=task__pb2.ContainerRestoreArgs.SerializeToString,
                response_deserializer=task__pb2.ContainerRestoreResp.FromString,
                )
        self.RuncDump = channel.unary_unary(
                '/cedana.services.task.TaskService/RuncDump',
                request_serializer=task__pb2.RuncDumpArgs.SerializeToString,
                response_deserializer=task__pb2.RuncDumpResp.FromString,
                )
        self.RuncRestore = channel.unary_unary(
                '/cedana.services.task.TaskService/RuncRestore',
                request_serializer=task__pb2.RuncRestoreArgs.SerializeToString,
                response_deserializer=task__pb2.RuncRestoreResp.FromString,
                )
        self.StartTask = channel.unary_unary(
                '/cedana.services.task.TaskService/StartTask',
                request_serializer=task__pb2.StartTaskArgs.SerializeToString,
                response_deserializer=task__pb2.StartTaskResp.FromString,
                )
        self.LogStreaming = channel.stream_stream(
                '/cedana.services.task.TaskService/LogStreaming',
                request_serializer=task__pb2.LogStreamingResp.SerializeToString,
                response_deserializer=task__pb2.LogStreamingArgs.FromString,
                )
        self.ClientStateStreaming = channel.stream_stream(
                '/cedana.services.task.TaskService/ClientStateStreaming',
                request_serializer=task__pb2.ClientStateStreamingResp.SerializeToString,
                response_deserializer=task__pb2.ProcessState.FromString,
                )
        self.MetaStateStreaming = channel.stream_stream(
                '/cedana.services.task.TaskService/MetaStateStreaming',
                request_serializer=task__pb2.MetaStateStreamingArgs.SerializeToString,
                response_deserializer=task__pb2.MetaStateStreamingResp.FromString,
                )
        self.ListRuncContainers = channel.unary_unary(
                '/cedana.services.task.TaskService/ListRuncContainers',
                request_serializer=task__pb2.RuncRoot.SerializeToString,
                response_deserializer=task__pb2.RuncList.FromString,
                )
        self.GetRuncContainerByName = channel.unary_unary(
                '/cedana.services.task.TaskService/GetRuncContainerByName',
                request_serializer=task__pb2.CtrByNameArgs.SerializeToString,
                response_deserializer=task__pb2.CtrByNameResp.FromString,
                )
        self.GetPausePid = channel.unary_unary(
                '/cedana.services.task.TaskService/GetPausePid',
                request_serializer=task__pb2.PausePidArgs.SerializeToString,
                response_deserializer=task__pb2.PausePidResp.FromString,
                )
        self.ListContainers = channel.unary_unary(
                '/cedana.services.task.TaskService/ListContainers',
                request_serializer=task__pb2.ListArgs.SerializeToString,
                response_deserializer=task__pb2.ListResp.FromString,
                )


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Dump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerDump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RuncDump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RuncRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStateStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetaStateStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRuncContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuncContainerByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPausePid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Dump': grpc.unary_unary_rpc_method_handler(
                    servicer.Dump,
                    request_deserializer=task__pb2.DumpArgs.FromString,
                    response_serializer=task__pb2.DumpResp.SerializeToString,
            ),
            'Restore': grpc.unary_unary_rpc_method_handler(
                    servicer.Restore,
                    request_deserializer=task__pb2.RestoreArgs.FromString,
                    response_serializer=task__pb2.RestoreResp.SerializeToString,
            ),
            'ContainerDump': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerDump,
                    request_deserializer=task__pb2.ContainerDumpArgs.FromString,
                    response_serializer=task__pb2.ContainerDumpResp.SerializeToString,
            ),
            'ContainerRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerRestore,
                    request_deserializer=task__pb2.ContainerRestoreArgs.FromString,
                    response_serializer=task__pb2.ContainerRestoreResp.SerializeToString,
            ),
            'RuncDump': grpc.unary_unary_rpc_method_handler(
                    servicer.RuncDump,
                    request_deserializer=task__pb2.RuncDumpArgs.FromString,
                    response_serializer=task__pb2.RuncDumpResp.SerializeToString,
            ),
            'RuncRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.RuncRestore,
                    request_deserializer=task__pb2.RuncRestoreArgs.FromString,
                    response_serializer=task__pb2.RuncRestoreResp.SerializeToString,
            ),
            'StartTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTask,
                    request_deserializer=task__pb2.StartTaskArgs.FromString,
                    response_serializer=task__pb2.StartTaskResp.SerializeToString,
            ),
            'LogStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.LogStreaming,
                    request_deserializer=task__pb2.LogStreamingResp.FromString,
                    response_serializer=task__pb2.LogStreamingArgs.SerializeToString,
            ),
            'ClientStateStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.ClientStateStreaming,
                    request_deserializer=task__pb2.ClientStateStreamingResp.FromString,
                    response_serializer=task__pb2.ProcessState.SerializeToString,
            ),
            'MetaStateStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.MetaStateStreaming,
                    request_deserializer=task__pb2.MetaStateStreamingArgs.FromString,
                    response_serializer=task__pb2.MetaStateStreamingResp.SerializeToString,
            ),
            'ListRuncContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRuncContainers,
                    request_deserializer=task__pb2.RuncRoot.FromString,
                    response_serializer=task__pb2.RuncList.SerializeToString,
            ),
            'GetRuncContainerByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuncContainerByName,
                    request_deserializer=task__pb2.CtrByNameArgs.FromString,
                    response_serializer=task__pb2.CtrByNameResp.SerializeToString,
            ),
            'GetPausePid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPausePid,
                    request_deserializer=task__pb2.PausePidArgs.FromString,
                    response_serializer=task__pb2.PausePidResp.SerializeToString,
            ),
            'ListContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContainers,
                    request_deserializer=task__pb2.ListArgs.FromString,
                    response_serializer=task__pb2.ListResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cedana.services.task.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Dump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/Dump',
            task__pb2.DumpArgs.SerializeToString,
            task__pb2.DumpResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Restore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/Restore',
            task__pb2.RestoreArgs.SerializeToString,
            task__pb2.RestoreResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContainerDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/ContainerDump',
            task__pb2.ContainerDumpArgs.SerializeToString,
            task__pb2.ContainerDumpResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContainerRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/ContainerRestore',
            task__pb2.ContainerRestoreArgs.SerializeToString,
            task__pb2.ContainerRestoreResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RuncDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/RuncDump',
            task__pb2.RuncDumpArgs.SerializeToString,
            task__pb2.RuncDumpResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RuncRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/RuncRestore',
            task__pb2.RuncRestoreArgs.SerializeToString,
            task__pb2.RuncRestoreResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/StartTask',
            task__pb2.StartTaskArgs.SerializeToString,
            task__pb2.StartTaskResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cedana.services.task.TaskService/LogStreaming',
            task__pb2.LogStreamingResp.SerializeToString,
            task__pb2.LogStreamingArgs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStateStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cedana.services.task.TaskService/ClientStateStreaming',
            task__pb2.ClientStateStreamingResp.SerializeToString,
            task__pb2.ProcessState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetaStateStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cedana.services.task.TaskService/MetaStateStreaming',
            task__pb2.MetaStateStreamingArgs.SerializeToString,
            task__pb2.MetaStateStreamingResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRuncContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/ListRuncContainers',
            task__pb2.RuncRoot.SerializeToString,
            task__pb2.RuncList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRuncContainerByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/GetRuncContainerByName',
            task__pb2.CtrByNameArgs.SerializeToString,
            task__pb2.CtrByNameResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPausePid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/GetPausePid',
            task__pb2.PausePidArgs.SerializeToString,
            task__pb2.PausePidResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cedana.services.task.TaskService/ListContainers',
            task__pb2.ListArgs.SerializeToString,
            task__pb2.ListResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
